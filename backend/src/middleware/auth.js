import { JWTService } from '../services/JWTService.js';
import { UserModel } from '../models/UserModel.js';
import { logError, logWarn } from '../config/logger.js';

// Middleware de autentica칞칚o b치sica
export const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token de acesso n칚o fornecido'
      });
    }
    
    // Verificar token
    const verification = JWTService.verifyAccessToken(token);
    
    if (!verification.valid) {
      if (verification.error === 'TOKEN_EXPIRED') {
        return res.status(401).json({
          success: false,
          message: 'Token de acesso expirado',
          error: 'TOKEN_EXPIRED'
        });
      }
      
      return res.status(401).json({
        success: false,
        message: 'Token de acesso inv치lido'
      });
    }
    
    // Buscar usu치rio no banco
    const user = await UserModel.findById(verification.payload.id);
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Usu치rio n칚o encontrado'
      });
    }
    
    if (user.is_banned) {
      return res.status(403).json({
        success: false,
        message: 'Conta suspensa ou banida'
      });
    }
    
    // Adicionar usu치rio ao request
    req.user = user;
    req.token = token;
    
    next();
  } catch (error) {
    logError('Erro no middleware de autentica칞칚o', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
};

// Middleware para verificar se usu치rio est치 autenticado (opcional)
export const optionalAuth = async (req, res, next) => {
  try {
    console.log('游댌 optionalAuth: Verificando autentica칞칚o opcional para:', req.path);
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];
    
    console.log('游댌 optionalAuth: Token presente:', !!token);
    
    if (token) {
      try {
        const verification = JWTService.verifyAccessToken(token);
        
        if (verification.valid) {
          const user = await UserModel.findById(verification.payload.id);
          if (user && !user.is_banned) {
            req.user = user;
            req.token = token;
            console.log('游댌 optionalAuth: Usu치rio autenticado:', user.username);
          }
        } else {
          console.log('游댌 optionalAuth: Token inv치lido, continuando sem autentica칞칚o');
        }
      } catch (tokenError) {
        console.log('游댌 optionalAuth: Erro ao verificar token, continuando sem autentica칞칚o:', tokenError.message);
      }
    } else {
      console.log('游댌 optionalAuth: Nenhum token, continuando sem autentica칞칚o');
    }
    
    console.log('游댌 optionalAuth: Continuando para pr칩ximo middleware');
    next();
  } catch (error) {
    console.log('游댌 optionalAuth: Erro geral, continuando sem autentica칞칚o:', error.message);
    // Em caso de erro, continuar sem autentica칞칚o
    next();
  }
};

// Middleware para verificar permiss칫es de admin
export const requireAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Autentica칞칚o necess치ria'
    });
  }
  
  const allowedRoles = ['admin', 'super_admin', 'moderator'];
  
  if (!allowedRoles.includes(req.user.role)) {
    logWarn('Tentativa de acesso n칚o autorizado', {
      userId: req.user.id,
      userRole: req.user.role,
      requiredRoles: allowedRoles,
      endpoint: req.originalUrl
    });
    
    return res.status(403).json({
      success: false,
      message: 'Acesso negado. Permiss칫es insuficientes.'
    });
  }
  
  next();
};

// Middleware para verificar permiss칫es de super admin
export const requireSuperAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Autentica칞칚o necess치ria'
    });
  }
  
  if (req.user.role !== 'super_admin') {
    logWarn('Tentativa de acesso n칚o autorizado (Super Admin)', {
      userId: req.user.id,
      userRole: req.user.role,
      endpoint: req.originalUrl
    });
    
    return res.status(403).json({
      success: false,
      message: 'Acesso negado. Apenas super administradores.'
    });
  }
  
  next();
};

// Middleware para verificar permiss칫es de moderador
export const requireModerator = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Autentica칞칚o necess치ria'
    });
  }
  
  if (!['moderator', 'admin', 'super_admin'].includes(req.user.role)) {
    return res.status(403).json({
      success: false,
      message: 'Acesso negado. Apenas moderadores.'
    });
  }
  
  next();
};

// Middleware para verificar roles espec칤ficos
export const requireRole = (allowedRoles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: 'Autentica칞칚o necess치ria'
      });
    }
    
    if (!allowedRoles.includes(req.user.role)) {
      logWarn('Tentativa de acesso n칚o autorizado', {
        userId: req.user.id,
        userRole: req.user.role,
        requiredRoles: allowedRoles,
        endpoint: req.originalUrl
      });
      
      return res.status(403).json({
        success: false,
        message: 'Acesso negado. Permiss칫es insuficientes.'
      });
    }
    
    next();
  };
};

// Middleware para verificar ownership (usu치rio s칩 pode acessar seus pr칩prios recursos)
export const requireOwnership = (resourceType) => {
  return async (req, res, next) => {
    try {
      if (!req.user) {
        return res.status(401).json({
          success: false,
          message: 'Autentica칞칚o necess치ria'
        });
      }
      
      // Admins podem acessar qualquer recurso
      if (['admin', 'super_admin', 'moderator'].includes(req.user.role)) {
        return next();
      }
      
      let resourceId;
      
      switch (resourceType) {
        case 'user':
          resourceId = req.params.userId || req.params.id;
          break;
        case 'mod':
          resourceId = req.params.modId;
          break;
        case 'comment':
          resourceId = req.params.commentId;
          break;
        default:
          resourceId = req.params.id;
      }
      
      if (!resourceId) {
        return res.status(400).json({
          success: false,
          message: 'ID do recurso n칚o fornecido'
        });
      }
      
      // Verificar se o usu치rio 칠 o dono do recurso
      // Esta l칩gica pode ser expandida conforme necess치rio
      if (resourceType === 'user' && resourceId === req.user.id) {
        return next();
      }
      
      // Para outros tipos de recursos, implementar verifica칞칚o espec칤fica
      // Por enquanto, apenas usu치rios podem acessar seus pr칩prios recursos
      return res.status(403).json({
        success: false,
        message: 'Acesso negado. Voc칡 n칚o tem permiss칚o para acessar este recurso.'
      });
      
    } catch (error) {
      logError('Erro no middleware de ownership', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  };
};

// Middleware para verificar se usu치rio est치 verificado
export const requireVerified = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Autentica칞칚o necess치ria'
    });
  }
  
  if (!req.user.is_verified) {
    return res.status(403).json({
      success: false,
      message: 'Conta n칚o verificada. Verifique seu email antes de continuar.'
    });
  }
  
  next();
};

// Middleware que permite acesso p칰blico para GET requests em rotas espec칤ficas
export const publicOrAuthenticated = async (req, res, next) => {
  try {
    // Se for GET request para buscar mod por ID, permitir acesso p칰blico
    if (req.method === 'GET' && req.params.id && !isNaN(req.params.id)) {
      console.log('游댌 publicOrAuthenticated: Permitindo acesso p칰blico para GET /:id');
      return next();
    }
    
    // Para outras rotas, verificar autentica칞칚o
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token de acesso n칚o fornecido'
      });
    }
    
    // Verificar token
    const verification = JWTService.verifyAccessToken(token);
    
    if (!verification.valid) {
      if (verification.error === 'TOKEN_EXPIRED') {
        return res.status(401).json({
          success: false,
          message: 'Token de acesso expirado',
          error: 'TOKEN_EXPIRED'
        });
      }
      
      return res.status(401).json({
        success: false,
        message: 'Token de acesso inv치lido'
      });
    }
    
    // Buscar usu치rio no banco
    const user = await UserModel.findById(verification.payload.id);
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Usu치rio n칚o encontrado'
      });
    }
    
    if (user.is_banned) {
      return res.status(403).json({
        success: false,
        message: 'Conta suspensa ou banida'
      });
    }
    
    // Adicionar usu치rio ao request
    req.user = user;
    req.token = token;
    
    next();
  } catch (error) {
    logError('Erro no middleware publicOrAuthenticated', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
};

// Middleware para coment치rios: acesso p칰blico mas com autentica칞칚o opcional
export const commentsPublicOrAuthenticated = async (req, res, next) => {
  try {
    // Permitir acesso p칰blico para GET requests
    if (req.method === 'GET') {
      // Se houver token, process치-lo para obter informa칞칫es do usu치rio
      const authHeader = req.headers.authorization;
      const token = authHeader && authHeader.split(' ')[1];
      
      if (token) {
        try {
          // Verificar token
          const verification = JWTService.verifyAccessToken(token);
          
          if (verification.valid) {
            // Buscar usu치rio no banco
            const user = await UserModel.findById(verification.payload.id);
            
            if (user && !user.is_banned) {
              // Adicionar usu치rio ao request
              req.user = user;
              req.token = token;
            }
          }
        } catch (tokenError) {
          // Se houver erro no token, continuar sem autentica칞칚o
          console.log('游댌 commentsPublicOrAuthenticated: Token inv치lido, continuando sem autentica칞칚o');
        }
      }
      
      // Sempre permitir acesso para GET requests
      return next();
    }
    
    // Para outros m칠todos, verificar autentica칞칚o
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token de acesso n칚o fornecido'
      });
    }
    
    // Verificar token
    const verification = JWTService.verifyAccessToken(token);
    
    if (!verification.valid) {
      if (verification.error === 'TOKEN_EXPIRED') {
        return res.status(401).json({
          success: false,
          message: 'Token de acesso expirado',
          error: 'TOKEN_EXPIRED'
        });
      }
      
      return res.status(401).json({
        success: false,
        message: 'Token de acesso inv치lido'
      });
    }
    
    // Buscar usu치rio no banco
    const user = await UserModel.findById(verification.payload.id);
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Usu치rio n칚o encontrado'
      });
    }
    
    if (user.is_banned) {
      return res.status(403).json({
        success: false,
        message: 'Conta suspensa ou banida'
      });
    }
    
    // Adicionar usu치rio ao request
    req.user = user;
    req.token = token;
    
    next();
  } catch (error) {
    logError('Erro no middleware commentsPublicOrAuthenticated', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
};

